import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import { fetchReviewsByProduct, postReview } from '../api/conment';

interface Review {
  id?: number;
  phoneId: number;
  userId: number;
  rating: number;
  comment: string;
}

interface ReviewsState {
  list: Review[];
  loading: boolean;
}

const initialState: ReviewsState = {
  list: [],
  loading: false,
};

// üî• L·∫•y danh s√°ch b√¨nh lu·∫≠n theo `phoneId`
export const fetchReviews = createAsyncThunk(
  'reviews/fetchReviews',
  async (phoneId: number) => {
    return await fetchReviewsByProduct(phoneId);
  }
);

// üî• G·ª≠i b√¨nh lu·∫≠n m·ªõi l√™n server
export const addReview = createAsyncThunk(
  'reviews/addReview',
  async (review: Review, { rejectWithValue }) => {
    try {
      const newReview = await postReview(review);
      return newReview;
    } catch (error) {
      return rejectWithValue('G·ª≠i b√¨nh lu·∫≠n th·∫•t b·∫°i');
    }
  }
);

const reviewsSlice = createSlice({
  name: 'reviews',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      // üü¢ X·ª≠ l√Ω khi l·∫•y b√¨nh lu·∫≠n
      .addCase(fetchReviews.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchReviews.fulfilled, (state, action) => {
        state.list = action.payload;
        state.loading = false;
      })
      .addCase(fetchReviews.rejected, (state) => {
        state.loading = false;
      })

      // üü¢ X·ª≠ l√Ω khi th√™m b√¨nh lu·∫≠n
      .addCase(addReview.fulfilled, (state, action) => {
        state.list.push(action.payload); // C·∫≠p nh·∫≠t danh s√°ch b√¨nh lu·∫≠n ngay l·∫≠p t·ª©c
      });
  },
});

export default reviewsSlice.reducer;
